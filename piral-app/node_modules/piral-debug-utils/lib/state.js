"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDebugState = exports.subscribe = exports.getState = exports.setState = exports.setInitialState = exports.navigate = exports.setNavigate = exports.getInitialSettings = exports.initialSetter = exports.disablePersistance = exports.enablePersistance = exports.settingsKeys = void 0;
const react_1 = require("react");
exports.settingsKeys = {
    viewState: 'dbg:view-state',
    loadPilets: 'dbg:load-pilets',
    hardRefresh: 'dbg:hard-refresh',
    viewOrigins: 'dbg:view-origins',
    extensionCatalogue: 'dbg:extension-catalogue',
    clearConsole: 'dbg:clear-console',
    persistSettings: 'dbg:persist-settings-data',
};
const persistKey = exports.settingsKeys.persistSettings;
const persistSettings = !!localStorage.getItem(persistKey);
const defaultSetter = (name, value) => {
    sessionStorage.setItem(name, value);
};
const persistentSetter = (name, value) => {
    defaultSetter(name, value);
    const data = JSON.parse(localStorage.getItem(persistKey));
    data[name] = value;
    localStorage.setItem(persistKey, JSON.stringify(data));
};
function getValue(key, defaultValue, fallbackValue) {
    const value = sessionStorage.getItem(key);
    if (['on', 'off'].includes(value)) {
        return value === 'on';
    }
    else if (typeof defaultValue === 'boolean') {
        return defaultValue;
    }
    else {
        return fallbackValue;
    }
}
if (persistSettings) {
    try {
        const settings = JSON.parse(localStorage.getItem(persistKey));
        Object.keys(settings).forEach((name) => {
            const value = settings[name];
            sessionStorage.setItem(name, value);
        });
    }
    catch (_a) {
        // invalid data
        localStorage.setItem(persistKey, '{}');
    }
}
function enablePersistance() {
    const data = {};
    const validKeys = Object.keys(exports.settingsKeys).map((m) => exports.settingsKeys[m]);
    for (let i = 0; i < sessionStorage.length; i++) {
        const name = sessionStorage.key(i);
        if (validKeys.includes(name)) {
            const value = sessionStorage.getItem(name);
            data[name] = value;
        }
    }
    localStorage.setItem(persistKey, JSON.stringify(data));
    return persistentSetter;
}
exports.enablePersistance = enablePersistance;
function disablePersistance() {
    localStorage.removeItem(persistKey);
    return defaultSetter;
}
exports.disablePersistance = disablePersistance;
exports.initialSetter = persistSettings ? persistentSetter : defaultSetter;
function getInitialSettings(defaultValues) {
    return {
        viewState: getValue(exports.settingsKeys.viewState, defaultValues.viewState, true),
        loadPilets: getValue(exports.settingsKeys.loadPilets, defaultValues.loadPilets, false),
        hardRefresh: getValue(exports.settingsKeys.hardRefresh, defaultValues.hardRefresh, false),
        viewOrigins: getValue(exports.settingsKeys.viewOrigins, defaultValues.viewOrigins, false),
        extensionCatalogue: getValue(exports.settingsKeys.extensionCatalogue, defaultValues.extensionCatalogue, true),
        clearConsole: getValue(exports.settingsKeys.clearConsole, defaultValues.clearConsole, false),
        persistSettings,
        cataloguePath: '/$debug-extension-catalogue',
    };
}
exports.getInitialSettings = getInitialSettings;
const listeners = [];
let _navigate = undefined;
function setNavigate(navigate) {
    _navigate = navigate;
}
exports.setNavigate = setNavigate;
function navigate(path, state) {
    _navigate === null || _navigate === void 0 ? void 0 : _navigate(path, state);
}
exports.navigate = navigate;
let state = {
    visualize: {
        active: false,
        force: false,
    },
    catalogue: {
        active: false,
        path: '',
    },
    route: undefined,
};
function setInitialState(initialSettings) {
    state.visualize.active = initialSettings.viewOrigins;
    state.catalogue.active = initialSettings.extensionCatalogue;
    state.catalogue.path = initialSettings.cataloguePath;
}
exports.setInitialState = setInitialState;
function setState(dispatch) {
    const newState = dispatch(state);
    if (newState !== state) {
        state = newState;
        listeners.forEach((listener) => listener());
    }
}
exports.setState = setState;
function getState() {
    return state;
}
exports.getState = getState;
function subscribe(select, notify) {
    let prevState = select(state);
    const cb = () => {
        const nextState = select(state);
        if (prevState !== nextState) {
            prevState = nextState;
            notify(nextState);
        }
    };
    const unsubscribe = () => {
        const idx = listeners.indexOf(cb);
        if (idx !== -1) {
            listeners.splice(idx, 1);
        }
    };
    listeners.push(cb);
    return unsubscribe;
}
exports.subscribe = subscribe;
function useDebugState(select) {
    const [state, setState] = (0, react_1.useState)(() => select(getState()));
    (0, react_1.useEffect)(() => subscribe(select, setState), []);
    return state;
}
exports.useDebugState = useDebugState;
//# sourceMappingURL=state.js.map