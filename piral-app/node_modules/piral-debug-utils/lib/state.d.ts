import { DefaultDebugSettings } from './types';
export declare const settingsKeys: {
    viewState: string;
    loadPilets: string;
    hardRefresh: string;
    viewOrigins: string;
    extensionCatalogue: string;
    clearConsole: string;
    persistSettings: string;
};
export declare function enablePersistance(): (name: string, value: string) => void;
export declare function disablePersistance(): (name: string, value: string) => void;
export declare const initialSetter: (name: string, value: string) => void;
export declare function getInitialSettings(defaultValues: DefaultDebugSettings): {
    viewState: boolean;
    loadPilets: boolean;
    hardRefresh: boolean;
    viewOrigins: boolean;
    extensionCatalogue: boolean;
    clearConsole: boolean;
    persistSettings: boolean;
    cataloguePath: string;
};
export interface PiralDebugState {
    visualize: {
        active: boolean;
        force: boolean;
    };
    catalogue: {
        active: boolean;
        path: string;
    };
    route: {
        path: string;
        state?: any;
    } | undefined;
}
interface NavigateFunction {
    (path: string, state?: any): void;
}
export declare function setNavigate(navigate: NavigateFunction): void;
export declare function navigate(path: string, state?: any): void;
export declare function setInitialState(initialSettings: ReturnType<typeof getInitialSettings>): void;
export declare function setState(dispatch: (arg: PiralDebugState) => PiralDebugState): void;
export declare function getState(): PiralDebugState;
export declare function subscribe<T>(select: (arg: PiralDebugState) => T, notify: (state: T) => void): () => void;
export declare function useDebugState<T>(select: (arg: PiralDebugState) => T): T;
export {};
