"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const kras_1 = require("kras");
const path_1 = require("path");
const injectors_1 = require("../common/injectors");
const log_1 = require("../common/log");
const config_1 = require("../common/config");
const browser_1 = require("../common/browser");
const io_1 = require("../common/io");
const port_1 = require("../common/port");
function startModule(options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const { appDir, appRoot, fullBase, open, feed, publicUrl, customkrasrc, originalPort, hooks, registerWatcher, registerEnd, pilets, maxListeners, } = options;
        const sources = pilets.map((m) => m.mocks).filter(Boolean);
        const api = `${publicUrl}${config_1.config.piletApi.replace(/^\/+/, '')}`;
        const baseMocks = (0, path_1.resolve)(fullBase, 'mocks');
        const krasBaseConfig = (0, path_1.resolve)(fullBase, kras_1.krasrc);
        const krasRootConfig = (0, path_1.resolve)(appRoot, kras_1.krasrc);
        const initial = (0, injectors_1.createInitialKrasConfig)(baseMocks, sources, { [api]: '' }, feed);
        const configs = [krasBaseConfig, ...pilets.map((p) => (0, path_1.resolve)(p.root, kras_1.krasrc)), krasRootConfig];
        const required = {
            injectors: {
                piral: {
                    active: false,
                },
                pilet: {
                    active: true,
                    pilets,
                    app: appDir,
                    publicUrl,
                    handle: ['/', api],
                    api,
                },
            },
        };
        if (customkrasrc) {
            configs.push((0, path_1.resolve)(fullBase, customkrasrc));
        }
        configs.forEach(registerWatcher);
        const port = yield (0, port_1.getAvailablePort)(originalPort);
        const krasConfig = (0, kras_1.readKrasConfig)({ port, initial, required }, ...configs);
        (0, log_1.log)('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = (0, kras_1.buildKrasWithCli)(krasConfig);
        krasServer.setMaxListeners(maxListeners);
        krasServer.removeAllListeners('open');
        krasServer.on('open', (0, injectors_1.notifyServerOnline)(publicUrl, krasConfig.api));
        yield ((_a = hooks.beforeOnline) === null || _a === void 0 ? void 0 : _a.call(hooks, { krasServer, krasConfig, open, port, api, feed, pilets, publicUrl }));
        yield krasServer.start();
        (0, browser_1.openBrowser)(open, port, publicUrl, !!krasConfig.ssl);
        yield ((_b = hooks.afterOnline) === null || _b === void 0 ? void 0 : _b.call(hooks, { krasServer, krasConfig, open, port, api, feed, pilets, publicUrl }));
        registerEnd(() => krasServer.stop());
    });
}
function startShell(options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const { fullBase, open, root, targetDir, feed, publicUrl, bundler, customkrasrc, originalPort, hooks, registerWatcher, registerEnd, } = options;
        const krasBaseConfig = (0, path_1.resolve)(fullBase, kras_1.krasrc);
        const krasRootConfig = (0, path_1.resolve)(root, kras_1.krasrc);
        const mocks = (0, path_1.join)(targetDir, 'mocks');
        const baseMocks = (0, path_1.resolve)(fullBase, 'mocks');
        const mocksExist = yield (0, io_1.checkExistingDirectory)(mocks);
        const sources = [mocksExist ? mocks : undefined].filter(Boolean);
        const initial = (0, injectors_1.createInitialKrasConfig)(baseMocks, sources);
        const configs = [krasBaseConfig, krasRootConfig];
        const required = {
            injectors: {
                piral: {
                    active: true,
                    handle: ['/'],
                    feed,
                    publicUrl,
                    bundler,
                },
                pilet: {
                    active: false,
                },
            },
        };
        if (customkrasrc) {
            configs.push((0, path_1.resolve)(fullBase, customkrasrc));
        }
        configs.forEach(registerWatcher);
        const port = yield (0, port_1.getAvailablePort)(originalPort);
        const krasConfig = (0, kras_1.readKrasConfig)({ port, initial, required }, ...configs);
        (0, log_1.log)('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = (0, kras_1.buildKrasWithCli)(krasConfig);
        krasServer.setMaxListeners(16);
        krasServer.removeAllListeners('open');
        krasServer.on('open', (0, injectors_1.notifyServerOnline)(publicUrl, krasConfig.api));
        yield ((_a = hooks.beforeOnline) === null || _a === void 0 ? void 0 : _a.call(hooks, { krasServer, krasConfig, open, port, publicUrl }));
        yield krasServer.start();
        (0, browser_1.openBrowser)(open, port, publicUrl, !!krasConfig.ssl);
        yield ((_b = hooks.afterOnline) === null || _b === void 0 ? void 0 : _b.call(hooks, { krasServer, krasConfig, open, port, publicUrl }));
        registerEnd(() => krasServer.stop());
    });
}
function setup() {
    return {
        startModule,
        startShell,
    };
}
exports.setup = setup;
//# sourceMappingURL=web.js.map