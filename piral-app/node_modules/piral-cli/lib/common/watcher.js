"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watcherTask = void 0;
const fs_1 = require("fs");
function watcherTask(cb) {
    let running = Promise.resolve();
    let pending = false;
    let notify = () => { };
    const disposers = [];
    const triggers = [];
    const end = new Promise(resolve => {
        notify = resolve;
    });
    const ref = {
        data: undefined,
        onTrigger(cb) {
            triggers.push(cb);
        },
        end,
    };
    const reRun = () => __awaiter(this, void 0, void 0, function* () {
        if (!pending) {
            pending = true;
            yield running;
            disposers.splice(0, disposers.length).forEach((dispose) => {
                dispose();
            });
            pending = false;
            context.status = 'reoccuring';
            yield run();
            triggers.splice(0, triggers.length).forEach((trigger) => {
                trigger();
            });
        }
    });
    const context = {
        onClean(dispose) {
            disposers.push(dispose);
        },
        watch(file) {
            if ((0, fs_1.existsSync)(file)) {
                const watcher = (0, fs_1.watch)(file, {
                    persistent: false,
                }, reRun);
                disposers.push(() => watcher.close());
            }
        },
        dependOn(anotherRef) {
            anotherRef.onTrigger(reRun);
        },
        close() {
            cb = () => Promise.resolve(undefined);
            reRun().then(notify);
        },
        status: 'initial',
    };
    const run = () => __awaiter(this, void 0, void 0, function* () {
        running = cb(context).then((data) => {
            ref.data = data;
        });
        yield running;
        return ref;
    });
    return new Promise((resolve, reject) => {
        run().then(resolve, reject);
    });
}
exports.watcherTask = watcherTask;
//# sourceMappingURL=watcher.js.map