"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPiletPackage = void 0;
const os_1 = require("os");
const path_1 = require("path");
const archive_1 = require("./archive");
const utils_1 = require("./utils");
const log_1 = require("./log");
const io_1 = require("./io");
const inspect_1 = require("./inspect");
function getPiletContentDir(root, packageData) {
    return __awaiter(this, void 0, void 0, function* () {
        const paths = (0, inspect_1.getPossiblePiletMainPaths)(packageData);
        for (const path of paths) {
            const file = (0, path_1.resolve)(root, path);
            if (yield (0, io_1.checkExists)(file)) {
                return (0, path_1.dirname)(file);
            }
        }
        return root;
    });
}
function createPiletPackage(baseDir, source, target) {
    return __awaiter(this, void 0, void 0, function* () {
        const root = (0, path_1.resolve)(baseDir, source);
        const dest = (0, path_1.resolve)(baseDir, target);
        (0, log_1.log)('generalDebug_0003', `Reading the package at "${root}" ...`);
        const pckg = yield (0, io_1.readJson)(root, 'package.json');
        (0, log_1.log)('generalDebug_0003', 'Successfully read package.');
        if (!pckg) {
            (0, log_1.fail)('packageJsonNotFound_0020');
        }
        if (!pckg.name) {
            (0, log_1.fail)('packageJsonMissingName_0021');
        }
        if (!pckg.version) {
            (0, log_1.fail)('packageJsonMissingVersion_0022');
        }
        const isFileTarget = target.endsWith('.tgz');
        (0, log_1.progress)(`Packing pilet in "${root}" ...`);
        const pckgName = pckg.name.replace(/@/g, '').replace(/\//g, '-');
        const id = `${pckgName}-${pckg.version}`;
        const name = isFileTarget ? (0, path_1.basename)(target) : `${id}.tgz`;
        const file = isFileTarget ? dest : (0, path_1.resolve)(dest, name);
        (0, log_1.log)('generalDebug_0003', `Assume package name "${name}".`);
        const content = yield getPiletContentDir(root, pckg);
        const files = [(0, path_1.resolve)(root, 'package.json'), content];
        const readme = (0, path_1.resolve)(root, 'README.md');
        if (Array.isArray(pckg.files)) {
            files.push(...pckg.files.map((f) => (0, path_1.resolve)(root, f)));
        }
        if (yield (0, io_1.checkExists)(readme)) {
            files.push(readme);
        }
        const prefix = (0, path_1.join)((0, os_1.tmpdir)(), `${id}-`);
        const cwd = yield (0, io_1.makeTempDir)(prefix);
        (0, log_1.log)('generalDebug_0003', `Creating package with content from "${content}" ...`);
        yield Promise.all(files.filter(utils_1.onlyUnique).map((file) => (0, io_1.copy)(file, (0, path_1.resolve)(cwd, (0, path_1.relative)(root, file)))));
        (0, log_1.log)('generalDebug_0003', `Creating directory if not exist for "${file}" ...`);
        yield (0, io_1.createDirectory)((0, path_1.dirname)(file));
        (0, log_1.log)('generalDebug_0003', `Creating compressed archive at "${file}" relative to "${root}" ...`);
        yield (0, archive_1.createTgz)(file, cwd, files.map((f) => (0, path_1.relative)(root, f)));
        (0, log_1.log)('generalDebug_0003', `Successfully created package from "${cwd}".`);
        yield (0, io_1.removeDirectory)(cwd);
        (0, log_1.log)('generalDebug_0003', `Packed file "${file}".`);
        return file;
    });
}
exports.createPiletPackage = createPiletPackage;
//# sourceMappingURL=pack.js.map