export interface WatcherRef<T> {
    end: Promise<void>;
    data: T;
    onTrigger(cb: () => void): void;
}
export interface WatcherContext {
    onClean(dispose: () => void): void;
    watch(file: string): void;
    dependOn<T>(ref: WatcherRef<T>): void;
    close(): void;
    status: 'initial' | 'reoccuring';
}
export declare function watcherTask<T = void>(cb: (watcherContext: WatcherContext) => Promise<T>): Promise<WatcherRef<T>>;
