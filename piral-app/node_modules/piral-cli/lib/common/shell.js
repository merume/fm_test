"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPiralInstance = void 0;
const log_1 = require("./log");
const npm_1 = require("./npm");
function installPiralInstance(usedSource, baseDir, rootDir, npmClient) {
    return __awaiter(this, void 0, void 0, function* () {
        const [sourceName, sourceVersion, hadVersion, type] = yield (0, npm_1.dissectPackageName)(baseDir, usedSource);
        const isLocal = (0, npm_1.isLinkedPackage)(sourceName, type, hadVersion, rootDir);
        if (!isLocal) {
            const packageRef = (0, npm_1.combinePackageRef)(sourceName, sourceVersion, type);
            (0, log_1.progress)(`Installing npm package %s ...`, packageRef);
            yield (0, npm_1.installNpmPackage)(npmClient, packageRef, rootDir, '--save-dev', '--save-exact');
        }
        else {
            (0, log_1.progress)(`Using locally available npm package %s ...`, sourceName);
        }
        const packageName = yield (0, npm_1.getPackageName)(rootDir, sourceName, type);
        const packageVersion = (0, npm_1.getPackageVersion)(hadVersion, sourceName, sourceVersion, type, rootDir);
        return [packageName, packageVersion];
    });
}
exports.installPiralInstance = installPiralInstance;
//# sourceMappingURL=shell.js.map