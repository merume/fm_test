"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removePiralInstancePilet = exports.removePiralInstancePiletDefaults = void 0;
const path_1 = require("path");
const common_1 = require("../common");
const types_1 = require("../types");
exports.removePiralInstancePiletDefaults = {
    logLevel: types_1.LogLevels.info,
    app: undefined,
    source: '.',
    npmClient: undefined,
};
function removePiralInstancePilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { npmClient: defaultNpmClient = exports.removePiralInstancePiletDefaults.npmClient, logLevel = exports.removePiralInstancePiletDefaults.logLevel, source = exports.removePiralInstancePiletDefaults.source, app = exports.removePiralInstancePiletDefaults.app, } = options;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        (0, common_1.setLogLevel)(logLevel);
        (0, common_1.progress)('Reading configuration ...');
        const npmClient = yield (0, common_1.determineNpmClient)(fullBase, defaultNpmClient);
        const allEntries = yield (0, common_1.matchAnyPilet)(fullBase, [source]);
        const tasks = allEntries.map((entryModule) => __awaiter(this, void 0, void 0, function* () {
            const targetDir = (0, path_1.dirname)(entryModule);
            const piletJson = 'pilet.json';
            const piletJsonPath = yield (0, common_1.findFile)(targetDir, piletJson);
            if (piletJsonPath) {
                const piletJsonDir = (0, path_1.dirname)(piletJsonPath);
                const oldContent = yield (0, common_1.readJson)(piletJsonDir, piletJson);
                const root = yield (0, common_1.findPiletRoot)(piletJsonDir);
                if ('piralInstances' in oldContent && app in oldContent.piralInstances) {
                    const newContent = Object.assign(Object.assign({}, oldContent), { piralInstances: Object.assign(Object.assign({}, oldContent.piralInstances), { [app]: undefined }) });
                    yield (0, common_1.writeJson)(piletJsonDir, piletJson, newContent, true);
                }
                yield (0, common_1.uninstallNpmPackage)(npmClient, app, root);
            }
            else {
                (0, common_1.log)('piletJsonNotAvailable_0180', targetDir);
            }
        }));
        yield Promise.all(tasks);
        (0, common_1.logDone)(`Removed the Piral instance!`);
    });
}
exports.removePiralInstancePilet = removePiralInstancePilet;
//# sourceMappingURL=remove-piral-instance-pilet.js.map