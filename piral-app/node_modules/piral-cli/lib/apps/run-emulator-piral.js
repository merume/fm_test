"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runEmulatorPiral = exports.runEmulatorPiralDefaults = void 0;
const os_1 = require("os");
const fs_1 = require("fs");
const path_1 = require("path");
const kras_1 = require("kras");
const types_1 = require("../types");
const common_1 = require("../common");
exports.runEmulatorPiralDefaults = {
    logLevel: types_1.LogLevels.info,
    open: common_1.config.openBrowser,
    port: common_1.config.port,
    registry: common_1.config.registry,
    npmClient: undefined,
};
function createTempDir() {
    const root = (0, path_1.join)((0, os_1.tmpdir)(), 'piral-cli-');
    return new Promise((resolve, reject) => (0, fs_1.mkdtemp)(root, (err, dir) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(dir);
        }
    }));
}
function runEmulatorPiral(baseDir = process.cwd(), options = {}) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const { open = exports.runEmulatorPiralDefaults.open, port: originalPort = exports.runEmulatorPiralDefaults.port, logLevel = exports.runEmulatorPiralDefaults.logLevel, npmClient: defaultNpmClient = exports.runEmulatorPiralDefaults.npmClient, registry = exports.runEmulatorPiralDefaults.registry, app, feed, } = options;
        const publicUrl = '/';
        const api = common_1.config.piletApi;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        const baseMocks = (0, path_1.resolve)(fullBase, 'mocks');
        (0, common_1.setLogLevel)(logLevel);
        (0, common_1.progress)('Reading configuration ...');
        (_a = process.stderr) === null || _a === void 0 ? void 0 : _a.setMaxListeners(16);
        (_b = process.stdout) === null || _b === void 0 ? void 0 : _b.setMaxListeners(16);
        (_c = process.stdin) === null || _c === void 0 ? void 0 : _c.setMaxListeners(16);
        const appRoot = yield createTempDir();
        if (registry !== exports.runEmulatorPiralDefaults.registry) {
            (0, common_1.progress)(`Setting up npm registry (%s) ...`, registry);
            yield (0, common_1.createFileIfNotExists)(appRoot, '.npmrc', `registry=${registry}
always-auth=true`, common_1.ForceOverwrite.yes);
        }
        const npmClient = yield (0, common_1.determineNpmClient)(appRoot, defaultNpmClient);
        const [packageName] = yield (0, common_1.installPiralInstance)(app, fullBase, appRoot, npmClient);
        const piral = yield (0, common_1.findPiralInstance)(packageName, appRoot, originalPort);
        const port = yield (0, common_1.getAvailablePort)(piral.port);
        const krasBaseConfig = (0, path_1.resolve)(fullBase, kras_1.krasrc);
        const krasRootConfig = (0, path_1.resolve)(appRoot, kras_1.krasrc);
        const initial = (0, common_1.createInitialKrasConfig)(baseMocks, [], { [api]: '' }, feed);
        const required = {
            injectors: {
                piral: {
                    active: false,
                },
                pilet: {
                    active: true,
                    pilets: [],
                    app: (0, path_1.dirname)(piral.app),
                    publicUrl,
                    handle: [publicUrl, api],
                    api,
                },
            },
        };
        const configs = [krasBaseConfig, krasRootConfig];
        const krasConfig = (0, kras_1.readKrasConfig)({ port, initial, required }, ...configs);
        (0, common_1.log)('generalVerbose_0004', `Using kras with configuration: ${JSON.stringify(krasConfig, undefined, 2)}`);
        const krasServer = (0, kras_1.buildKrasWithCli)(krasConfig);
        krasServer.setMaxListeners(16);
        krasServer.removeAllListeners('open');
        krasServer.on('open', (0, common_1.notifyServerOnline)(publicUrl, krasConfig.api));
        yield krasServer.start();
        (0, common_1.openBrowser)(open, port, publicUrl, !!krasConfig.ssl);
        yield new Promise((resolve) => krasServer.on('close', resolve));
    });
}
exports.runEmulatorPiral = runEmulatorPiral;
//# sourceMappingURL=run-emulator-piral.js.map