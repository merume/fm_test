"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePilet = exports.validatePiletDefaults = void 0;
const path_1 = require("path");
const common_1 = require("../common");
const rules_1 = require("../rules");
const types_1 = require("../types");
exports.validatePiletDefaults = {
    entry: './src/index',
    logLevel: types_1.LogLevels.info,
    app: undefined,
};
function validatePilet(baseDir = process.cwd(), options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { entry = exports.validatePiletDefaults.entry, logLevel = exports.validatePiletDefaults.logLevel, app = exports.validatePiletDefaults.app, } = options;
        const fullBase = (0, path_1.resolve)(process.cwd(), baseDir);
        (0, common_1.setLogLevel)(logLevel);
        (0, common_1.progress)('Reading configuration ...');
        const rules = yield (0, rules_1.getPiletRules)();
        const entryFile = (0, path_1.join)(fullBase, entry);
        const target = (0, path_1.dirname)(entryFile);
        const { dependencies, peerDependencies, devDependencies, peerModules, root, importmap, apps, piletPackage, ignored: _0, } = yield (0, common_1.retrievePiletData)(target, app);
        const { validators } = (0, common_1.getPiletsInfo)(apps[0].appPackage);
        const errors = [];
        const warnings = [];
        const context = {
            error(message) {
                errors.push((0, common_1.log)('generalError_0002', message));
            },
            warning(message) {
                warnings.push((0, common_1.log)('generalWarning_0001', message));
            },
            logLevel,
            entry: entryFile,
            dependencies,
            devDependencies,
            peerDependencies,
            importmap,
            peerModules,
            root,
            apps,
            piletPackage,
        };
        yield (0, common_1.runRules)(rules, context, validators);
        (0, common_1.ruleSummary)(errors, warnings);
    });
}
exports.validatePilet = validatePilet;
//# sourceMappingURL=validate-pilet.js.map