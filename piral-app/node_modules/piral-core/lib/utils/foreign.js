"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderInDom = exports.convertComponent = exports.changeDomPortal = exports.attachDomPortal = exports.slotName = exports.portalName = exports.extensionName = void 0;
const react_1 = require("react");
const react_dom_1 = require("react-dom");
exports.extensionName = 'piral-extension';
exports.portalName = 'piral-portal';
exports.slotName = 'piral-slot';
function attachDomPortal(id, context, element, component, props) {
    const portal = (0, react_dom_1.createPortal)((0, react_1.createElement)(component, props), element);
    context.showPortal(id, portal);
    return [id, portal];
}
exports.attachDomPortal = attachDomPortal;
function changeDomPortal(id, current, context, element, component, props) {
    const next = (0, react_dom_1.createPortal)((0, react_1.createElement)(component, props), element);
    context.updatePortal(id, current, next);
    return [id, next];
}
exports.changeDomPortal = changeDomPortal;
function convertComponent(converter, component) {
    if (typeof converter !== 'function') {
        throw new Error(`No converter for component of type "${component.type}" registered.`);
    }
    return converter(component);
}
exports.convertComponent = convertComponent;
function renderInDom(context, element, component, props) {
    const portalId = 'pid';
    let parent = element;
    while (parent) {
        if (parent instanceof Element && parent.localName === exports.portalName && parent.hasAttribute(portalId)) {
            const id = parent.getAttribute(portalId);
            return attachDomPortal(id, context, element, component, props);
        }
        parent = parent.parentNode || parent.host;
    }
    return attachDomPortal('root', context, element, component, props);
}
exports.renderInDom = renderInDom;
//# sourceMappingURL=foreign.js.map