"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderElement = void 0;
const components_1 = require("../components");
const utils_1 = require("../utils");
if (typeof window !== 'undefined' && 'customElements' in window) {
    /**
     * This is a nice abstraction allowing anyone to actually use the extension system
     * brought by Piral. Not all props of the extension system are actually exposed.
     *
     * Usage:
     *
     * ```
     * <piral-extension name="my-ext-name"></piral-extension>
     * ```
     */
    class PiralExtension extends HTMLElement {
        constructor() {
            super(...arguments);
            this.dispose = utils_1.noop;
            this.update = utils_1.noop;
            this.props = {
                name: this.getAttribute('name'),
                emptySkipsRender: typeof this.getAttribute('empty-skips-render') === 'string',
                params: (0, utils_1.tryParseJson)(this.getAttribute('params')),
                empty: undefined,
                order: undefined,
                render: undefined,
                children: (0, utils_1.reactifyContent)(this.childNodes),
            };
        }
        get params() {
            return this.props.params;
        }
        set params(value) {
            this.props.params = value;
            this.update(this.props);
        }
        get name() {
            return this.props.name;
        }
        set name(value) {
            this.props.name = value;
            this.update(this.props);
        }
        get order() {
            return this.props.order;
        }
        set order(value) {
            this.props.order = value;
            this.update(this.props);
        }
        get render() {
            return this.props.render;
        }
        set render(value) {
            this.props.render = value;
            this.update(this.props);
        }
        get empty() {
            return this.props.empty;
        }
        set empty(value) {
            this.props.empty = value;
            this.update(this.props);
        }
        get emptySkipsRender() {
            return this.props.emptySkipsRender;
        }
        set emptySkipsRender(value) {
            this.props.emptySkipsRender = value;
            this.update(this.props);
        }
        connectedCallback() {
            this.style.display = 'contents';
            if (this.isConnected) {
                this.dispatchEvent(new CustomEvent('render-html', {
                    bubbles: true,
                    detail: {
                        target: this,
                        props: this.props,
                    },
                }));
            }
        }
        disconnectedCallback() {
            this.dispose();
            this.dispose = utils_1.noop;
            this.update = utils_1.noop;
        }
        attributeChangedCallback(name, _, newValue) {
            switch (name) {
                case 'name':
                    this.name = newValue;
                    break;
                case 'params':
                    this.params = (0, utils_1.tryParseJson)(newValue);
                    break;
                case 'empty-skips-render':
                    this.params = typeof newValue === 'string';
                    break;
            }
        }
        static get observedAttributes() {
            return ['name', 'params', 'empty-skips-render'];
        }
    }
    customElements.define(utils_1.extensionName, PiralExtension);
    /**
     * This is a boundary to host elements from other frameworks - effectively vanishing
     * at runtime.
     *
     * Usage:
     *
     * ```
     * <piral-portal pid="host-1234"></piral-portal>
     * ```
     */
    class PiralPortal extends HTMLElement {
        connectedCallback() {
            this.style.display = 'contents';
        }
    }
    customElements.define(utils_1.portalName, PiralPortal);
    /**
     * This is a virtual element to aggregate rendering from other frameworks, mostly
     * used like piral-portal, but without context-hosting capabilities. This would
     * be used exclusively within a foreign framework, not from Piral to initiate.
     *
     * Usage:
     *
     * ```
     * <piral-slot></piral-slot>
     * ```
     */
    class PiralSlot extends HTMLElement {
        connectedCallback() {
            this.style.display = 'contents';
        }
    }
    customElements.define(utils_1.slotName, PiralSlot);
}
function renderElement(context, element, props) {
    if (typeof window !== 'undefined') {
        let [id, portal] = (0, utils_1.renderInDom)(context, element, components_1.ExtensionSlot, props);
        const evName = 'extension-props-changed';
        const handler = (ev) => update(ev.detail);
        const dispose = () => {
            context.hidePortal(id, portal);
            element.removeEventListener(evName, handler);
        };
        const update = (newProps) => {
            [id, portal] = (0, utils_1.changeDomPortal)(id, portal, context, element, components_1.ExtensionSlot, newProps);
        };
        element.addEventListener(evName, handler);
        return [dispose, update];
    }
    return [utils_1.noop, utils_1.noop];
}
exports.renderElement = renderElement;
//# sourceMappingURL=element.js.map