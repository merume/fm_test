"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisteredDebug = exports.RegisteredLayout = exports.RegisteredRouteSwitch = exports.RegisteredRouter = exports.RegisteredLoadingIndicator = exports.RegisteredErrorInfo = exports.getPiralComponent = void 0;
const React = require("react");
const hooks_1 = require("../hooks");
/**
 * Gets a registered layout component by its name.
 * This will always return a valid component. If nothing is found
 * then the returned component will just return null.
 * @param name The name of the registered layout component.
 * @returns The registered layout component or an empty stub component.
 */
function getPiralComponent(name) {
    return (props) => {
        const Component = (0, hooks_1.useGlobalState)((s) => s.components[name]);
        // tslint:disable-next-line:no-null-keyword
        return Component ? React.createElement(Component, Object.assign({}, props)) : null;
    };
}
exports.getPiralComponent = getPiralComponent;
/**
 * Gets the currently registered ErrorInfo component.
 * By default the DefaultErrorInfo component is used.
 */
exports.RegisteredErrorInfo = getPiralComponent('ErrorInfo');
/**
 * Gets the currently registered LoadingIndicator component.
 * By default only Loading is rendered.
 */
exports.RegisteredLoadingIndicator = getPiralComponent('LoadingIndicator');
/**
 * Gets the currently registered Router component.
 * By default the BrowserRouter is used.
 */
exports.RegisteredRouter = getPiralComponent('Router');
/**
 * Gets the currently registered Route Switch component.
 * By default the DefaultRouteSwitch component is used.
 */
exports.RegisteredRouteSwitch = getPiralComponent('RouteSwitch');
/**
 * Gets the currently registered Layout component.
 * By default the children are rendered.
 */
exports.RegisteredLayout = getPiralComponent('Layout');
/**
 * Gets the currently registered Debug component.
 * By default nothing is used.
 */
exports.RegisteredDebug = getPiralComponent('Debug');
//# sourceMappingURL=components.js.map