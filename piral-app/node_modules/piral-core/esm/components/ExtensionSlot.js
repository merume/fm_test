import * as React from 'react';
import { isfunc } from 'piral-base';
import { wrapComponent } from './wrapComponent';
import { useGlobalState, useGlobalStateContext } from '../hooks';
import { defaultRender, none } from '../utils';
const wrapper = ({ children }) => defaultRender(children);
const renderExtensions = [
    {
        component: (props) => {
            const context = useGlobalStateContext();
            const converters = context.converters;
            const piral = context.apis._;
            const { component, props: args } = props.params;
            const Component = React.useMemo(() => wrapComponent(converters, component, { piral }, wrapper), [component]);
            return React.createElement(Component, Object.assign({}, args));
        },
        defaults: {},
        pilet: '',
        reference: {
            displayName: 'AnyComponent',
        },
    },
];
function defaultOrder(extensions) {
    return extensions;
}
/**
 * The extension slot component to be used when the available
 * extensions of a given name should be rendered at a specific
 * location.
 */
export function ExtensionSlot(props) {
    const { name, render = defaultRender, empty, params, children, emptySkipsRender = false, order = defaultOrder, } = props;
    const extensions = useGlobalState((s) => (name ? s.registry.extensions[name] || none : renderExtensions));
    const isEmpty = extensions.length === 0 && isfunc(empty);
    const content = isEmpty
        ? [defaultRender(empty(), 'empty')]
        : order(extensions).map(({ component: Component, reference, defaults = {} }, i) => (React.createElement(Component, { key: `${(reference === null || reference === void 0 ? void 0 : reference.displayName) || '_'}${i}`, children: children, params: Object.assign(Object.assign({}, defaults), params) })));
    if (isEmpty && emptySkipsRender) {
        return content[0];
    }
    return render(content);
}
ExtensionSlot.displayName = `ExtensionSlot`;
//# sourceMappingURL=ExtensionSlot.js.map