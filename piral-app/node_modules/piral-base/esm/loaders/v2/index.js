import { __rest } from "tslib";
import { registerModule, emptyApp, createEvaluatedPilet } from '../../utils';
function extendSharedDependencies(dependencies) {
    for (const name of Object.keys(dependencies)) {
        if (!System.has(name)) {
            const dependency = dependencies[name];
            registerModule(name, () => System.import(dependency));
        }
    }
}
function handleFailure(error, link) {
    console.error('Failed to load SystemJS module', link, error);
    return emptyApp;
}
/**
 * Loads the provided SystemJS-powered pilet.
 * @param entry The pilet's entry.
 * @param _config The loader configuration.
 * @returns The evaluated pilet that can now be integrated.
 */
export default function loader(entry, _config) {
    const { dependencies = {}, config = {}, link } = entry, rest = __rest(entry, ["dependencies", "config", "link"]);
    const meta = Object.assign({ dependencies,
        config,
        link }, rest);
    extendSharedDependencies(dependencies);
    return System.import(link)
        .catch((error) => handleFailure(error, link))
        .then((app) => createEvaluatedPilet(meta, app));
}
//# sourceMappingURL=index.js.map