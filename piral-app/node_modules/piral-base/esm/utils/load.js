import { promisify } from './helpers';
import { includeScriptDependency, emptyApp, createEvaluatedPilet } from './dependency';
const depContext = {};
function loadSharedDependencies(dependencies) {
    if (dependencies) {
        const names = Object.keys(dependencies);
        return Promise.all(names.map((name) => {
            return depContext[name] || (depContext[name] = includeScriptDependency(dependencies[name]));
        }));
    }
    return promisify();
}
function handleFailure(error, name) {
    console.error('Failed to load pilet', name, error);
    return emptyApp;
}
/**
 * Loads a pilet from the specified metadata and loader function.
 * @param meta The metadata of the pilet.
 * @param link The link (URL) to the pilet's main script.
 * @param loadPilet The loader function derived for the pilet.
 * @returns The evaluated pilet, which can then be integrated.
 */
export function loadFrom(meta, loadPilet) {
    return loadSharedDependencies(meta.dependencies)
        .then(loadPilet)
        .catch((error) => handleFailure(error, meta.name))
        .then((app) => createEvaluatedPilet(meta, app));
}
//# sourceMappingURL=load.js.map