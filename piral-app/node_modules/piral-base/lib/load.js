"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPilets = exports.loadMetadata = void 0;
const utils_1 = require("./utils");
function checkFetchPilets(fetchPilets) {
    if (!(0, utils_1.isfunc)(fetchPilets)) {
        console.error('Could not get the pilets. Provide a valid `fetchPilets` function.');
        return false;
    }
    return true;
}
/**
 * Loads the pilets metadata and puts them in the cache, if provided.
 * @param fetchPilets The function to resolve the pilets.
 * @param cache The optional cache to use initially and update later.
 */
function loadMetadata(fetchPilets) {
    if (checkFetchPilets(fetchPilets)) {
        return fetchPilets().then((pilets) => {
            if (!Array.isArray(pilets)) {
                throw new Error('The fetched pilets metadata is not an array.');
            }
            return pilets.map((meta) => (Object.assign({}, meta)));
        });
    }
    return (0, utils_1.promisify)([]);
}
exports.loadMetadata = loadMetadata;
/**
 * Loads the pilets by first getting them, then evaluating the raw content.
 * @param fetchPilets The function to resolve the pilets.
 * @param fetchDependency A function to fetch the dependencies. By default, `fetch` is used.
 * @param dependencies The availablly global dependencies, if any.
 * @returns A promise leading to the evaluated pilets.
 */
function loadPilets(fetchPilets, loadPilet) {
    return loadMetadata(fetchPilets).then((pilets) => Promise.all(pilets.map(loadPilet)));
}
exports.loadPilets = loadPilets;
//# sourceMappingURL=load.js.map