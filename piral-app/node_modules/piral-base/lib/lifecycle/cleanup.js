"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareCleanup = exports.runCleanup = void 0;
const utils_1 = require("../utils");
const evtName = 'unload-pilet';
/**
 * Cleans up the pilet by destroying the referenced stylesheets and
 * running the cleanup steps incl. deletion of referenced global
 * resources.
 * @param app The pilet to be cleaned up.
 * @param api The api for the pilet to be used.
 * @param hooks The hooks to use in the cleanup process.
 */
function runCleanup(app, api, hooks) {
    const css = document.querySelector(`link[data-origin=${JSON.stringify(app.name)}]`);
    const url = app.basePath;
    css === null || css === void 0 ? void 0 : css.remove();
    (0, utils_1.callfunc)(app.teardown, api);
    (0, utils_1.callfunc)(hooks.cleanupPilet, app);
    // check if this was actually set up using a require reference
    if ('requireRef' in app) {
        const depName = app.requireRef;
        delete window[depName];
    }
    // remove the pilet's evaluated modules from SystemJS (except the shared dependencies)
    if (url) {
        const dependencies = Object.keys(app.dependencies || {}).map((m) => app.dependencies[m]);
        (0, utils_1.unregisterModules)(url, dependencies);
    }
}
exports.runCleanup = runCleanup;
/**
 * Prepares the cleanup of a pilet by wiring up a handler to the
 * unload event.
 * @param app The pilet to be prepared for cleanup.
 * @param api The api for the pilet to be used.
 * @param hooks The hooks to use in the cleanup process.
 */
function prepareCleanup(app, api, hooks) {
    const handler = (e) => {
        if (e.name === app.name) {
            api.off(evtName, handler);
            runCleanup(app, api, hooks);
        }
    };
    api.on(evtName, handler);
}
exports.prepareCleanup = prepareCleanup;
//# sourceMappingURL=cleanup.js.map