"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupPiletBundle = exports.setupSinglePilet = void 0;
const cleanup_1 = require("./cleanup");
const utils_1 = require("../utils");
function logError(name, e) {
    console.error(`Error while setting up ${name}.`, e);
}
function withCatch(result, name) {
    if (result instanceof Promise) {
        return result.catch((e) => logError(name, e));
    }
    return (0, utils_1.promisify)(result);
}
/**
 * Sets up the given single pilet by calling the exported `setup`
 * function on the pilet with the created API.
 * @param app The pilet's evaluated content.
 * @param apiFactory The API factory to be used in the pilet.
 * @param hooks The API hooks to apply.
 */
function setupSinglePilet(app, apiFactory, hooks) {
    const name = app === null || app === void 0 ? void 0 : app.name;
    try {
        const api = apiFactory(app);
        (0, utils_1.callfunc)(hooks.setupPilet, app);
        const result = app.setup(api);
        (0, cleanup_1.prepareCleanup)(app, api, hooks);
        return withCatch(result, name);
    }
    catch (e) {
        logError(name, e);
    }
    return (0, utils_1.promisify)();
}
exports.setupSinglePilet = setupSinglePilet;
/**
 * Sets up the given multi pilet by calling the exported `setup`
 * function on the pilet with the API factory.
 * @param app The pilet's evaluated content.
 * @param apiFactory The API factory to be used in the bundle.
 * @param hooks The API hooks to apply.
 */
function setupPiletBundle(app, apiFactory, hooks) {
    const name = (app === null || app === void 0 ? void 0 : app.name) || 'pilet bundle';
    try {
        (0, utils_1.callfunc)(hooks.setupPilet, app);
        const result = app.setup(apiFactory);
        return withCatch(result, name);
    }
    catch (e) {
        logError(name, e);
    }
    return (0, utils_1.promisify)();
}
exports.setupPiletBundle = setupPiletBundle;
//# sourceMappingURL=setup.js.map