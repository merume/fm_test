"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.includeScriptDependency = exports.includeScript = exports.checkPiletAppAsync = exports.checkPiletApp = exports.checkCreateApi = exports.createEvaluatedPilet = exports.emptyApp = void 0;
const system_1 = require("./system");
const helpers_1 = require("./helpers");
exports.emptyApp = {
    setup() { },
};
function createEvaluatedPilet(meta, mod) {
    const basePath = (0, helpers_1.getBasePath)(meta.link);
    const app = checkPiletApp(meta.name, mod);
    return Object.assign(Object.assign(Object.assign({}, meta), app), { basePath });
}
exports.createEvaluatedPilet = createEvaluatedPilet;
function checkCreateApi(createApi) {
    if (!(0, helpers_1.isfunc)(createApi)) {
        console.warn('Invalid `createApi` function. Skipping pilet installation.');
        return false;
    }
    return true;
}
exports.checkCreateApi = checkCreateApi;
/**
 * Checks the given pilet app for validity.
 * @param name The name of the pilet to check against.
 * @param app The evaluated app to check.
 * @returns The app to be used for the pilet.
 */
function checkPiletApp(name, app) {
    if (!app) {
        console.error('Invalid module found.', name);
    }
    else if (typeof app.setup !== 'function') {
        console.warn('Setup function is missing.', name);
    }
    else {
        return app;
    }
    return exports.emptyApp;
}
exports.checkPiletApp = checkPiletApp;
/**
 * Checks the given pilet app asynchrously for validity.
 * @param name The name of the pilet to check against.
 * @param app The evaluated - or evaluating - app to check.
 * @returns A promise resolving to the app of the pilet.
 */
function checkPiletAppAsync(name, app) {
    return (0, helpers_1.promisify)(app).then((resolvedApp) => checkPiletApp(name, resolvedApp));
}
exports.checkPiletAppAsync = checkPiletAppAsync;
/**
 * Includes a pilet as a script.
 * @param depName The name of the dependency (require reference).
 * @param link The link to the script.
 * @param integrity The integrity for the script, if any.
 * @param crossOrigin Defines if cross-origin should be used.
 * @returns The promise resolving to the pilet app.
 */
function includeScript(depName, link, integrity, crossOrigin) {
    window[depName] = (moduleId) => (0, system_1.requireModule)(moduleId, link);
    return includeScriptDependency(link, integrity, crossOrigin).then((s) => s.app);
}
exports.includeScript = includeScript;
/**
 * Includes a dependency as a script.
 * @param link The link to the script.
 * @param integrity The integrity for the script, if any.
 * @param crossOrigin Defines if cross-origin should be used.
 * @returns The script element.
 */
function includeScriptDependency(link, integrity, crossOrigin) {
    return new Promise((resolve, reject) => {
        const s = document.createElement('script');
        s.async = true;
        s.src = link;
        if (integrity) {
            s.crossOrigin = crossOrigin || 'anonymous';
            s.integrity = integrity;
        }
        else if (crossOrigin) {
            s.crossOrigin = crossOrigin;
        }
        s.onload = () => resolve(s);
        s.onerror = (e) => reject(e);
        document.body.appendChild(s);
    });
}
exports.includeScriptDependency = includeScriptDependency;
//# sourceMappingURL=dependency.js.map