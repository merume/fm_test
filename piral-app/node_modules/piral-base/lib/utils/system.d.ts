/// <reference types="systemjs" />
import 'systemjs/dist/system.js';
import 'systemjs/dist/extras/named-register.js';
export interface ModuleResolver {
    (): any;
}
/**
 * Registers all static global dependencies in the system.
 * @param modules The modules to register as dependencies.
 * @returns A promise when SystemJS included all dependencies.
 */
export declare function registerDependencies(modules: Record<string, any>): Promise<System.Module[]>;
/**
 * Registers a plain module in SystemJS.
 * @param name The name of the module
 * @param resolve The resolver for the module's content.
 */
export declare function registerModule(name: string, resolve: ModuleResolver): void;
/**
 * Unregisters all modules coming from the given base URL.
 * @param baseUrl The base URL used to identify the modules to delete to.
 * @param dependencies The shared dependencies from the pilet. These will be left alive.
 */
export declare function unregisterModules(baseUrl: string, dependencies: Array<string>): void;
/**
 * Requires a module from SystemJS
 * @param name The name of the module to obtain
 * @returns The module's content, if any, otherwise throws an error.
 */
export declare function requireModule(name: string, parent: string): System.Module;
