"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultLoader = exports.extendLoader = void 0;
const bundle_1 = require("./loaders/bundle");
const empty_1 = require("./loaders/empty");
const v0_1 = require("./loaders/v0");
const v1_1 = require("./loaders/v1");
const v2_1 = require("./loaders/v2");
const utils_1 = require("./utils");
const inspect_1 = require("./inspect");
/**
 * Extends the default loader with the spec loaders, if any are given.
 * @param fallback The loader to use if none of the spec loaders matches.
 * @param specLoaders The spec loaders to use.
 * @returns The loader.
 */
function extendLoader(fallback, specLoaders) {
    if (typeof specLoaders === 'object' && specLoaders) {
        return (meta) => {
            if (typeof meta.spec === 'string') {
                const loaderOverride = specLoaders[meta.spec];
                if ((0, utils_1.isfunc)(loaderOverride)) {
                    return loaderOverride(meta);
                }
            }
            return fallback(meta);
        };
    }
    return fallback;
}
exports.extendLoader = extendLoader;
/**
 * Gets the default loader provided by piral-base.
 * @param config The loader configuration.
 * @returns The function to load a pilet from its entry.
 */
function getDefaultLoader(config = {}) {
    return (result) => {
        const r = (0, inspect_1.inspectPilet)(result);
        switch (r[0]) {
            case 'v2':
                return (0, v2_1.default)(r[1], config);
            case 'v1':
                return (0, v1_1.default)(r[1], config);
            case 'v0':
                return (0, v0_1.default)(r[1], config);
            case 'bundle':
                return (0, bundle_1.default)(r[1], config);
            default:
                return (0, empty_1.default)(r[1], config);
        }
    };
}
exports.getDefaultLoader = getDefaultLoader;
//# sourceMappingURL=loader.js.map